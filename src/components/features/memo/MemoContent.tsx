import React, { useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import rehypeRaw from 'rehype-raw';
import { remarkVideoEmbed, remarkNeoDBEmbedPlaceholder, ensureMetingJS } from './MemoRichContentPlugins';
import { NeoDBEmbed } from './NeoDBEmbed';

// Placeholder for i18n function
const i18n = (key: string) => key;

interface MemoContentProps {
  content: string;
}

export function MemoContent({ content }: MemoContentProps) {
  useEffect(() => {
    // Ensure MetingJS is loaded if content suggests it's needed
    // This check can be made more specific if needed
    if (content.includes('music.163.com') || content.includes('y.qq.com')) {
      ensureMetingJS(content);
    }
  }, [content]);

  return (
    <div className="prose dark:prose-invert prose-sm sm:prose-base lg:prose-lg xl:prose-xl max-w-none p-4">
      <ReactMarkdown
        remarkPlugins={[remarkGfm, remarkVideoEmbed, remarkNeoDBEmbedPlaceholder]}
        rehypePlugins={[rehypeRaw]} // Needed to parse HTML generated by remarkNeoDBEmbedPlaceholder
        components={{
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          div: ({ node, className, children, ...props }) => {
            if (className === 'neodb-embed-placeholder') {
              const url = node?.properties?.['data-url'] as string;
              if (url) {
                return <NeoDBEmbed url={url} />;
              }
            }
            // Fallback for other divs
            return <div className={className} {...props}>{children}</div>;
          },
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          metingjs: ({ node, ...props }) => {
            // For <meting-js> tags, ensure they are handled correctly.
            // react-markdown might strip attributes or handle them in a way
            // that Meting.js doesn't expect. If MetingJS processes the DOM directly,
            // this might just need to be <meting-js {...props} />
            // However, since Meting.js is a global script, it should pick up raw HTML.
            // We added `rehypeRaw` which should allow the HTML string from the plugin to pass through.
            // If issues persist, a more specific component rendering might be needed.
            // For now, rely on rehypeRaw.
            return <meting-js {...props} />;
          }
        }}
      >
        {content}
      </ReactMarkdown>
    </div>
  );
}
